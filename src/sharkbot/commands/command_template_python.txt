from commands2 import Command
from util.ntloggerutility import NTLoggerUtility
import datetime
import wpilib

# Add additional imports here


# Replace the following placeholders with the appropriate values:
# {verb} - the action to be performed by the command (e.g., "Stop")
# {subsystem} - the name of the subsystem (e.g., "Shooter")
# {do what} - a brief description of what the command does (e.g., "stop")
# {which} - a description of the subsystem being acted upon (e.g., "shooter")
# {Intent of this command} - a brief description of the purpose of the command (e.g., "This command stops the shooter
# subsystem. To do that, it stops all motors and closes the gate. This command does not complete until the flywheel RPM
# is zero and the gate is closed.")
# {subsystem_variable} - the name of the variable used to reference the subsystem in the command (e.g., "shooter"). camelCase.
#
# Delete this block of instructions after replacing the placeholders.
# Delete all comments that say "# Replace blah blah" once you have replaced the placeholders.
class {verb}{subsystem}(Command):                   # <- Replace here.
""" Command to {do what} to the {which} subsystem. """
    def __init__(self, {subsystem_variable}):           # <- Replace here
        """
        {Intent of this command}

        Args:
            {subsystem_variable}: A variable holding a reference to the robot's {subsystem}.   # <- Replace here
        """
        super().__init__()
        self.shooter = {subsystem_variable}              # <- Replace here
        self.logger = NTLoggerUtility("{subsystem}Logs") # <- Replace here
        self.addRequirements({subsystem_variable})       # <- Replace here

     def getTimestamp(self):
        return datetime.now().strftime("%H:%M:%S")

    def initialize(self) -> None:
        """
        Called once when the Command is scheduled.

        Write's a timestamped message to the "Command" log in the `{subsystem}Logs` table that the command has been created. # <- Replace here

        { Calls method in the subsystem to perform the action. } # < Replace here ("Calls shooter.stop() to stop the shooter subsystem.")
        """
        timestamp = self.getTimestamp()
        msg = f"[%{timestamp}] StopShooterCommand: Stopping shooter"
        self.logger.info("Command", msg)

        self.shooter.stop()

    def execute(self) -> None:
        """ Called repeatedly when this Command is running.

           { Explain logic } <- Replace here
        """
        # This is where the main logic for the Command should go.

        # <- Replace here: Example of writing a message to the debug log. This is done with logger.debug(), not logger().info()
        timestamp = self.getTimestamp()
        msg = f"[%{timestamp}] Shooter flywheel RPM: {self.shooter.getFlywheelRpm()} \
        Gate status: {self.shooter.getGateStatus()}"
        self.logger.debug("Command", msg)

    def isFinished(self) -> bool:
        """
        Called repeatedly when this Command is running.

        :return: `True` if the Command should end, `False` otherwise.
        """
        flywheelRpm = self.shooter.getFlywheelRpm()
        gateStatus = self.shooter.getGateStatus()
        if flywheelRpm == 0 and gateStatus == "closed":
            return True
        else:
            return False

    def end(self, interrupted: bool) -> None:
        """
        Called once when the Command ends (because `isFinished()` returned `True`) or is interrupted.
        :param self: This Command instance.
        :param interrupted: `True` if the Command was interrupted, `False` otherwise.
        :return:
        """
        timestamp = self.getTimestamp()
        if interrupted:
            msg = f"[%{timestamp}] StopShooterCommand was interrupted"
        else:
            msg = f"[%{timestamp}] StopShooterCommand: Shooter stopped"
        self.logger.info("Command", msg)