# Import standard Python modules.
import math

# Import WPILib and other robotics modules.
import commands2
# import rev
import phoenix6
import wpilib
import wpilib.drive
import wpimath.geometry
import wpimath.kinematics

from wpimath.controller import ProfiledPIDController
from wpimath.trajectory import TrapezoidProfile
from phoenix6 import hardware, controls, configs

# Import our modules.
from constants.operatorinterfaceconstants import OperatorInterfaceConstants
from constants.driveconstants import DriveConstants

# ==============================================================================
# The module subsystem class
# ==============================================================================
class ModuleSubsystem(commands2.Subsystem):
    def __init__(self) -> None:
        super().__init__()  # Call the Subsystem class's (the "super" part) init.

        # ---------------------------------------------------------------------
        # Set up motors, their encoders, and the drivetrain.
        # ---------------------------------------------------------------------
                       
        # Create and configure the drive train controllers and motors, all 
        # REV Robotics CANSparkMaxes driving Kraken motors.
        self.drive_fl = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_FL)
        self.drive_fr = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_FR)
        self.drive_bl = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_BL)
        self.drive_br = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_BR)

        self.turn_fl = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_FL)
        self.turn_fr = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_FR)
        self.turn_bl = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_BL)
        self.turn_br = phoenix6.hardware.TalonFX(DriveConstants.DRIVE_BR)

        # Set up Kraken's configuration by first getting a default 
        # configuration object.
        self.configuration = phoenix6.configs.TalonFXConfiguration()

        self.configuration.motor_output.inverted = phoenix6.signals.InvertedValue.COUNTER_CLOCKWISE_POSITIVE
        self.configuration.motor_output.neutral_mode = phoenix6.signals.NeutralModeValue.COAST

        # Configuration 
        # self.drive_fl.configurator.apply(configuration)
        # self.drive_fr.configurator.apply(configuration)
        # self.drive_bl.configurator.apply(configuration)
        # self.drive_br.configurator.apply(configuration)

        # Get encoders for each motor.
        self.front_left_encoder = phoenix6.hardware.CANcoder(DriveConstants.CAN_FL)
        self.front_right_encoder = phoenix6.hardware.CANcoder(DriveConstants.CAN_FR)
        self.back_left_encoder = phoenix6.hardware.CANcoder(DriveConstants.CAN_BL)
        self.back_right_encoder = phoenix6.hardware.CANcoder(DriveConstants.CAN_BR)

        # Reset the encoders as they could be at any position after some runs.
        self.front_left_encoder.set_position(0)
        self.front_right_encoder.set_position(0)
        self.back_left_encoder.set_position(0)
        self.back_right_encoder.set_position(0)
        
    def periodic(self):
        pass

    def module_setup(self, name : str):
        swerve_module_constants = {
            'back_left' : [ DriveConstants.DRIVE_BL, DriveConstants.TURN_BL, DriveConstants.CAN_BL],
            'front_right' : [DriveConstants.DRIVE_FR, DriveConstants.TURN_FR, DriveConstants.CAN_FR],
            'front_left' : [DriveConstants.DRIVE_FL, DriveConstants.TURN_FL, DriveConstants.CAN_FL],
            'back_right' : [ DriveConstants.DRIVE_BR, DriveConstants.TURN_BR, DriveConstants.CAN_BR]
        }
        
        drive = swerve_module_constants[name][0]
        turn = swerve_module_constants[name][1]
        can = swerve_module_constants[name][2]
        module = (drive, turn, can)

        return module
        
